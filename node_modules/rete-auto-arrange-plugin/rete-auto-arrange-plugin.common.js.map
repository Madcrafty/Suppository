{"version":3,"file":"rete-auto-arrange-plugin.common.js","sources":["src/appliers/applier.ts","src/appliers/list/standard.ts","src/appliers/list/transition/animation.ts","src/appliers/list/transition/index.ts","src/presets/classic/index.ts","src/presets/index.ts","src/index.ts"],"sourcesContent":["import { ElkNode } from 'elkjs'\nimport { NodeEditor } from 'rete'\nimport { BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ExpectedSchemes } from '../types'\n\nexport abstract class Applier<S extends ExpectedSchemes, K> {\n  editor!: NodeEditor<S>\n  area!: BaseAreaPlugin<S, K>\n\n  setEditor(editor: NodeEditor<S>) {\n    this.editor = editor\n  }\n\n  setArea(area: BaseAreaPlugin<S, K>) {\n    this.area = area\n  }\n\n  public abstract apply(nodes: ElkNode[]): Promise<void>\n}\n","import { ElkNode, ElkShape } from 'elkjs'\nimport { NodeId } from 'rete'\n\nimport { ExpectedSchemes } from '../../types'\nimport { Applier } from '../applier'\n\n/**\n * Standard applier. Applies the layout to the nodes and their children immediately\n */\nexport class StandardApplier<S extends ExpectedSchemes, K> extends Applier<S, K> {\n  protected getValidShapes<Shape extends ElkShape>(shapes: Shape[]): (Shape & Required<ElkShape>)[] {\n    return shapes.filter((shape): shape is Shape & Required<ElkShape> => {\n      const { x, y, width, height } = shape\n\n      return ![typeof x, typeof y, typeof width, typeof height].includes('undefined')\n    })\n  }\n  protected async resizeNode(id: NodeId, width: number, height: number): Promise<void | boolean> {\n    return await this.area.resize(id, width, height)\n  }\n  protected async translateNode(id: NodeId, x: number, y: number): Promise<void | boolean> {\n    const view = this.area.nodeViews.get(id)\n\n    if (view) {\n      await view.translate(x, y)\n    }\n  }\n\n  public async apply(nodes: ElkNode[], offset = { x: 0, y: 0 }) {\n    const correctNodes = this.getValidShapes(nodes)\n\n    await Promise.all(correctNodes.map(async ({ id, x, y, width, height, children }) => {\n      await Promise.all([\n        this.resizeNode(id, width, height),\n        this.translateNode(id, offset.x + x, offset.y + y)\n      ])\n\n      if (children) {\n        await this.apply(children, { x: offset.x + x, y: offset.y + y })\n      }\n    }))\n  }\n}\n","\ntype AnimationRecord = {\n    startTime: number\n    duration: number\n    cb: (t: number) => void\n    done: (success: boolean) => void\n}\n\nexport class AnimationSystem {\n  activeAnimations = new Map<string, AnimationRecord>()\n  frameId?: number\n\n  start() {\n    const entries = Array.from(this.activeAnimations.entries())\n\n    entries.forEach(([key, { startTime, duration, cb, done }]) => {\n      let t = (Date.now() - startTime) / duration\n\n      if (t >= 1) t = 1\n\n      if (t < 0 || t >= 1) {\n        this.activeAnimations.delete(key)\n        if (t >= 1) {\n          cb(1)\n          done(true)\n        }\n        return\n      }\n      cb(t)\n    })\n    this.frameId = requestAnimationFrame(() => this.start())\n  }\n\n  async add<R>(duration: number, id: string, tick: (t: number) => Promise<R>) {\n    const startTime = Date.now()\n\n    return new Promise<boolean>(done => {\n      this.activeAnimations.set(id, { startTime, duration, cb: tick, done })\n    })\n  }\n\n  cancel(key: string) {\n    this.activeAnimations.get(key)?.done(false)\n    this.activeAnimations.delete(key)\n  }\n\n  stop() {\n    if (typeof this.frameId !== 'undefined') cancelAnimationFrame(this.frameId)\n  }\n}\n","import { ElkNode } from 'elkjs'\nimport { NodeId } from 'rete'\n\nimport { ExpectedSchemes } from '../../../types'\nimport { StandardApplier } from '../standard'\nimport { AnimationSystem } from './animation'\n\n/**\n * Transition applier props\n */\nexport type Props = {\n  /** Transition duration */\n  duration?: number\n  /** Transition timing function. Default is linear */\n  timingFunction?: (t: number) => number\n  /** Callback for each tick (frame) of the transition */\n  onTick?: (t: number) => void\n  /** Callback specifying whether the node needs to be laid out */\n  needsLayout?: (id: NodeId) => boolean\n}\n\n/**\n * Transition applier. Applies the layout to the nodes and their children with transition\n */\nexport class TransitionApplier<S extends ExpectedSchemes, K> extends StandardApplier<S, K> {\n  duration: number\n  timingFunction: (t: number) => number\n  animation = new AnimationSystem()\n\n  /**\n   * @param props Transition applier props\n   */\n  constructor(private props?: Props) {\n    super()\n    this.duration = typeof props?.duration !== 'undefined' ? props.duration : 2000\n    this.timingFunction = typeof props?.timingFunction !== 'undefined' ? props.timingFunction : t => t\n\n    this.animation.start()\n  }\n\n  protected applyTiming(from: number, to: number, t: number) {\n    const k = this.timingFunction(t)\n\n    return from * (1 - k) + to * k\n  }\n\n  protected async resizeNode(id: NodeId, width: number, height: number) {\n    const node = this.editor.getNode(id)\n\n    if (!node) return false\n    const previous = { width: node.width, height: node.height }\n\n    return await this.animation.add(this.duration, `${id}_resize`, t => {\n      const currentWidth = this.applyTiming(previous.width, width, t)\n      const currentHeight = this.applyTiming(previous.height, height, t)\n\n      this.props?.onTick && this.props.onTick(t)\n      return super.resizeNode(id, currentWidth, currentHeight)\n    })\n  }\n\n  protected async translateNode(id: NodeId, x: number, y: number) {\n    const view = this.area.nodeViews.get(id)\n\n    if (!view) return false\n    const previous = { ...view.position }\n\n    return await this.animation.add(this.duration, `${id}_translate`, t => {\n      const currentX = this.applyTiming(previous.x, x, t)\n      const currentY = this.applyTiming(previous.y, y, t)\n\n      this.props?.onTick && this.props.onTick(t)\n      return super.translateNode(id, currentX, currentY)\n    })\n  }\n\n  public cancel(id: NodeId) {\n    this.animation.cancel(`${id}_resize`)\n    this.animation.cancel(`${id}_translate`)\n  }\n\n  public async apply(nodes: ElkNode[], offset = { x: 0, y: 0 }) {\n    const correctNodes = this.getValidShapes(nodes)\n\n    await Promise.all(correctNodes.map(({ id, x, y, width, height, children }) => {\n      const hasChilden = children && children.length\n      const needsLayout = this.props?.needsLayout ? this.props.needsLayout(id) : true\n      const forceSelf = !hasChilden || needsLayout\n\n      return Promise.all([\n        hasChilden && this.apply(children, { x: offset.x + x, y: offset.y + y }),\n        forceSelf && this.resizeNode(id, width, height),\n        forceSelf && this.translateNode(id, offset.x + x, offset.y + y)\n      ])\n    }))\n  }\n\n  public destroy() {\n    this.animation.stop()\n  }\n}\n","import { PortData, Preset } from '../types'\n\n/**\n * Classic preset. Input ports are positioned on the left bottom side of the node, output ports are positioned on the right top side of the node.\n * @priority 7\n */\nexport const setup = (props?: { spacing?: number, top?: number, bottom?: number }): Preset => {\n  return () => ({\n    port(data): PortData {\n      const { spacing, top, bottom } = {\n        spacing: props && typeof props.spacing !== 'undefined' ? props.spacing : 35,\n        top: props && typeof props.top !== 'undefined' ? props.top : 35,\n        bottom: props && typeof props.bottom !== 'undefined' ? props.bottom : 15\n      }\n\n      if (data.side === 'output') {\n        return {\n          x: 0,\n          y: top + data.index * spacing,\n          width: 15,\n          height: 15,\n          side: 'EAST'\n        }\n      }\n      return {\n        x: 0,\n        y: data.height - bottom - data.ports * spacing + data.index * spacing,\n        width: 15,\n        height: 15,\n        side: 'WEST'\n      }\n    }\n  })\n}\n","/**\n * Built-in presets. Responsible for node port positioning.\n * @module\n */\nexport * as classic from './classic'\nexport * from './types'\n","import ELK, { ElkNode, ElkPort, LayoutOptions } from 'elkjs'\nimport { NodeEditor, NodeId, Root, Scope } from 'rete'\nimport { BaseArea, BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { Applier, StandardApplier } from './appliers'\nimport { Preset } from './presets/types'\nimport { ExpectedSchemes } from './types'\n\nexport type { Preset }\nexport * as ArrangeAppliers from './appliers'\nexport * as Presets from './presets'\nexport * from './types'\n\ntype Context<S extends ExpectedSchemes> = {\n  nodes: S['Node'][]\n  connections: S['Connection'][]\n}\n\n/**\n * Auto arrange plugin. Layouts the graph using `elk.js`\n * @priority 10\n */\nexport class AutoArrangePlugin<Schemes extends ExpectedSchemes, T = never> extends Scope<never, [BaseArea<Schemes> | T, Root<Schemes>]> {\n  elk = new ELK()\n  demonstration = 'https://rtsys.informatik.uni-kiel.de/elklive/json.html'\n  presets: Preset[] = []\n\n  constructor() {\n    super('auto-arrange')\n  }\n\n  /**\n   * Adds a preset to the plugin, which will be used to layout the node ports and customize the layout options\n   * @param preset Preset to add\n   */\n  public addPreset(preset: Preset) {\n    this.presets.push(preset)\n  }\n\n  private findPreset(nodeId: string) {\n    for (const presetFactory of this.presets) {\n      const result = presetFactory(nodeId)\n\n      if (result) return result\n    }\n    throw new Error('cannot find preset for node with id = ' + nodeId)\n  }\n\n  private getArea() {\n    return this.parentScope<BaseAreaPlugin<Schemes, T>>(BaseAreaPlugin)\n  }\n\n  private getEditor() {\n    return this.getArea().parentScope<NodeEditor<Schemes>>(NodeEditor)\n  }\n\n  private nodeToLayoutChild(node: Schemes['Node'], context: Context<Schemes>): ElkNode {\n    const { id, width, height } = node\n    const inputs = node.inputs\n      ? Object.entries(node.inputs).map(([key, input]) => ({\n        key,\n        input\n      }))\n      : []\n    const outputs = node.outputs\n      ? Object.entries(node.outputs).map(([key, output]) => ({\n        key,\n        output\n      }))\n      : []\n    const preset = this.findPreset(id)\n\n    return <ElkNode>{\n      id,\n      width,\n      height,\n      labels: [\n        {\n          text: 'label' in node ? node.label : ''\n        }\n      ],\n      ...this.graphToElk(context, id),\n      ports: [\n        ...inputs\n          .sort((a, b) => (a.input?.index || 0) - (b.input?.index || 0))\n          .map(({ key }, index) => {\n            const { side, width: portWidth, height: portHeight, x, y } = preset.port({\n              nodeId: id,\n              key,\n              side: 'input',\n              width,\n              height,\n              index,\n              ports: inputs.length\n            })\n\n            return <ElkPort>{\n              id: this.getPortId(id, key, 'input'),\n              width: portWidth,\n              height: portHeight,\n              x,\n              y,\n              properties: {\n                side\n              }\n            }\n          }),\n        ...outputs\n          .sort((a, b) => (a.output?.index || 0) - (b.output?.index || 0))\n          .map(({ key }, index) => {\n            const { side, width: portWidth, height: portHeight, x, y } = preset.port({\n              nodeId: id,\n              side: 'output',\n              key,\n              index,\n              width,\n              height,\n              ports: outputs.length\n            })\n\n            return <ElkPort>{\n              id: this.getPortId(id, key, 'output'),\n              width: portWidth,\n              height: portHeight,\n              x,\n              y,\n              properties: {\n                side\n              }\n            }\n          })\n      ],\n      layoutOptions: {\n        ...preset.options?.(id) || {},\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        portConstraints: 'FIXED_POS'\n      }\n    }\n  }\n\n  private connectionToLayoutEdge(connection: Schemes['Connection']) {\n    const source = connection.sourceOutput\n      ? this.getPortId(connection.source, connection.sourceOutput, 'output')\n      : connection.source\n    const target = connection.targetInput\n      ? this.getPortId(connection.target, connection.targetInput, 'input')\n      : connection.target\n\n    return {\n      id: connection.id,\n      sources: [source],\n      targets: [target]\n    }\n  }\n\n  private graphToElk(context: Context<Schemes>, parent?: NodeId): Pick<ElkNode, 'children' | 'edges'> {\n    const nodes = context.nodes.filter(n => n.parent === parent)\n\n    return {\n      children: nodes\n        .map(n => this.nodeToLayoutChild(n, context)),\n      edges: context.connections\n        .filter(() => !parent)\n        .map(c => this.connectionToLayoutEdge(c))\n    }\n  }\n\n  private getPortId(id: NodeId, key: string, side: 'input' | 'output') {\n    return [id, key, side].join('_')\n  }\n\n  /**\n   * Method to layout the graph\n   * @param props Options for the layout\n   * @param props.options elk.js options for the layout\n   * @param props.applier Layout applier. Responsible for applying node positions to the graph\n   * @returns Debug information about the layout\n   */\n  // eslint-disable-next-line max-statements, max-len\n  async layout(props?: { options?: LayoutOptions, applier?: Applier<Schemes, T> } & Partial<Context<Schemes>>) {\n    const nodes = props?.nodes || this.getEditor().getNodes()\n    const connections = props?.connections || this.getEditor().getConnections()\n    const graph: ElkNode = {\n      id: 'root',\n      layoutOptions: {\n        /* eslint-disable @typescript-eslint/naming-convention */\n        'elk.algorithm': 'layered',\n        'elk.hierarchyHandling': 'INCLUDE_CHILDREN',\n        'elk.edgeRouting': 'POLYLINE',\n        ...(props?.options || {} as LayoutOptions)\n        /* eslint-enable @typescript-eslint/naming-convention */\n      },\n      ...this.graphToElk({ nodes, connections })\n    }\n    const applier = props?.applier || new StandardApplier()\n    const source = JSON.stringify(graph, null, '\\t')\n\n    applier.setEditor(this.getEditor())\n    applier.setArea(this.getArea())\n\n    try {\n      const result = await this.elk.layout(graph)\n\n      if (result.children) {\n        await applier.apply(result.children)\n      }\n\n      return {\n        demonstration: this.demonstration,\n        source,\n        result\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.warn('[rete-auto-arrange-plugin]', {\n        source,\n        demonstration: this.demonstration\n      })\n      throw error\n    }\n  }\n}\n"],"names":["Applier","_classCallCheck","_createClass","key","value","setEditor","editor","setArea","area","StandardApplier","_Applier","_inherits","_super","_createSuper","apply","arguments","getValidShapes","shapes","filter","shape","x","y","width","height","_typeof","includes","_resizeNode","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_callee$","_context","prev","next","resize","abrupt","sent","stop","resizeNode","_x","_x2","_x3","_translateNode","_callee2","view","_callee2$","_context2","nodeViews","get","translate","translateNode","_x4","_x5","_x6","_apply","_callee4","nodes","_this","offset","correctNodes","_args4","_callee4$","_context4","length","undefined","Promise","all","map","_ref2","_callee3","_ref","children","_callee3$","_context3","_x8","_x7","AnimationSystem","_defineProperty","Map","start","entries","Array","from","activeAnimations","forEach","_slicedToArray","_ref2$","startTime","duration","cb","done","t","Date","now","frameId","requestAnimationFrame","_add","tick","_this2","set","add","cancel","_this$activeAnimation","cancelAnimationFrame","TransitionApplier","_StandardApplier","props","call","_assertThisInitialized","timingFunction","animation","applyTiming","to","k","node","previous","getNode","concat","_this2$props","currentWidth","currentHeight","onTick","_get","_getPrototypeOf","prototype","_this3","_objectSpread","position","_this3$props","currentX","currentY","_this4","_args3","_this4$props","hasChilden","needsLayout","forceSelf","destroy","setup","port","data","_spacing$top$bottom","spacing","top","bottom","side","index","ports","AutoArrangePlugin","_Scope","ELK","addPreset","preset","presets","push","findPreset","nodeId","_iterator","_createForOfIteratorHelper","_step","s","n","presetFactory","result","err","e","f","Error","getArea","parentScope","BaseAreaPlugin","getEditor","NodeEditor","nodeToLayoutChild","context","_preset$options","inputs","Object","input","outputs","_ref3","_ref4","output","labels","text","label","graphToElk","_toConsumableArray","sort","a","b","_a$input","_b$input","_ref5","_preset$port","portWidth","portHeight","getPortId","properties","_a$output","_b$output","_ref6","_preset$port2","layoutOptions","options","portConstraints","connectionToLayoutEdge","connection","source","sourceOutput","target","targetInput","sources","targets","parent","edges","connections","c","join","_layout","graph","applier","getNodes","getConnections","JSON","stringify","elk","layout","demonstration","t0","console","warn","Scope"],"mappings":"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"}