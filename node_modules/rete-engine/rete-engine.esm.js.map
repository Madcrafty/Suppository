{"version":3,"file":"rete-engine.esm.js","sources":["src/control-flow.ts","src/control-flow-engine.ts","src/dataflow.ts","src/utils/cache.ts","src/utils/cancellable.ts","src/dataflow-engine.ts"],"sourcesContent":["import { NodeEditor, NodeId } from 'rete'\n\nimport { ClassicScheme } from './types'\n\n/**\n * ControlFlowNodeSetup is a set of functions that define how to execute a node.\n */\nexport type ControlFlowNodeSetup<T extends ClassicScheme['Node'], I extends (keyof T['inputs'])[] = string[], O extends (keyof T['outputs'])[] = string[]> = {\n  /** Specifies the inputs which are part of the control flow */\n  inputs: () => I\n  /** Specifies the outputs which are part of the control flow */\n  outputs: () => O\n  /** Called when the node received control from the previous node */\n  execute(input: I[number], forward: (output: O[number]) => any): any\n}\n\n/**\n * ControlFlow is a class that allows to execute nodes in a graph using Control flow approach.\n * @priority 7\n */\nexport class ControlFlow<Schemes extends ClassicScheme> {\n  setups = new Map<NodeId, ControlFlowNodeSetup<any, any, any>>()\n\n  /**\n   * @param editor NodeEditor instance\n   */\n  constructor(private editor: NodeEditor<Schemes>) { }\n\n  /**\n   * Adds the node to the control flow.\n   * @param node Node instance\n   * @param setup Set of functions that define how to execute the node\n   */\n  public add<T extends Schemes['Node']>(node: T, setup: ControlFlowNodeSetup<T, (keyof T['inputs'])[], (keyof T['outputs'])[]>) {\n    const affected = this.setups.get(node.id)\n\n    if (affected) {\n      throw new Error('already processed')\n    }\n    this.setups.set(node.id, setup)\n  }\n\n  /**\n   * Removes the node from the control flow.\n   * @param nodeId Node id\n   */\n  public remove(nodeId: NodeId) {\n    this.setups.delete(nodeId)\n  }\n\n  /**\n   * Execute the node and its successors (in case `forward` is called for some output).\n   * @param nodeId Node id\n   * @param input Input key that will be considered as the initiator of the execution\n   */\n  public execute(nodeId: NodeId, input?: string) {\n    const setup = this.setups.get(nodeId)\n\n    if (!setup) throw new Error('node is not initialized')\n    const inputKeys = setup.inputs()\n\n    if (input && !inputKeys.includes(input)) throw new Error('inputs don\\'t have a key')\n\n    setup.execute(input, (output) => {\n      const outputKeys = setup.outputs()\n\n      if (!outputKeys.includes(output)) throw new Error('outputs don\\'t have a key')\n\n      const cons = this.editor.getConnections().filter(c => {\n        return c.source === nodeId && c.sourceOutput === output\n      })\n\n      cons.forEach(con => {\n        this.execute(con.target, con.targetInput)\n      })\n    })\n  }\n}\n","import { GetSchemes, NodeEditor, NodeId, Root, Scope } from 'rete'\n\nimport { ControlFlow } from './control-flow'\nimport { ClassicScheme } from './types'\n\nexport type ControlFlowEngineScheme = GetSchemes<\n  ClassicScheme['Node'] & { execute(input: string, forward: (output: string) => void): void },\n  ClassicScheme['Connection']\n>\n\ntype Configure<Schemes extends ControlFlowEngineScheme> = (node: Schemes['Node']) => ({\n  inputs: () => string[]\n  outputs: () => string[]\n})\n\n/**\n * ControlFlowEngine is a plugin that integrates ControlFlow with NodeEditor making it easy to use\n * @priority 9\n * @listens nodecreated\n * @listens noderemoved\n */\nexport class ControlFlowEngine<Schemes extends ControlFlowEngineScheme> extends Scope<never, [Root<Schemes>]> {\n  editor!: NodeEditor<Schemes>\n  controlflow!: ControlFlow<Schemes>\n\n  /**\n   * @param configure Allows to specify which inputs and outputs are part of the control flow\n   */\n  constructor(private configure?: Configure<Schemes>) {\n    super('control-flow-engine')\n\n    this.addPipe(context => {\n      if (context.type === 'nodecreated') {\n        this.add(context.data)\n      }\n      if (context.type === 'noderemoved') {\n        this.remove(context.data)\n      }\n      return context\n    })\n  }\n\n  setParent(scope: Scope<Root<Schemes>>): void {\n    super.setParent(scope)\n\n    this.editor = this.parentScope<NodeEditor<Schemes>>(NodeEditor)\n    this.controlflow = new ControlFlow(this.editor)\n  }\n\n  private add(node: Schemes['Node']) {\n    const options = this.configure\n      ? this.configure(node)\n      : { inputs: () => Object.keys(node.inputs), outputs: () => Object.keys(node.outputs) }\n\n    this.controlflow.add(node, {\n      inputs: options.inputs,\n      outputs: options.outputs,\n      execute: (input, forward) => {\n        node.execute(String(input), forward)\n      }\n    })\n  }\n\n  private remove(node: Schemes['Node']) {\n    this.controlflow.remove(node.id)\n  }\n\n  /**\n   * Trigger execution starting from the specified node.\n   * @param nodeId Node id\n   * @param input Input key that will be considered as the initiator of the execution\n   */\n  public execute(nodeId: NodeId, input?: string) {\n    this.controlflow.execute(nodeId, input)\n  }\n}\n","import { NodeEditor, NodeId } from 'rete'\n\nimport { ClassicScheme } from './types'\n\n/**\n * DataflowNodeSetup is a set of functions that define how to process a node.\n */\nexport type DataflowNodeSetup<\n  T extends ClassicScheme['Node'],\n  I extends { [key in keyof T['inputs']]: any },\n  O extends { [key in keyof T['outputs']]: any }\n> = {\n  inputs: () => (keyof I)[]\n  outputs: () => (keyof O)[]\n  data(fetchInputs: () => Promise<{ [key in keyof I]: I[key][] }>): Promise<O> | O\n}\n\n/**\n * Dataflow is a class that allows to process nodes in a graph using Dataflow approach.\n * @priority 8\n */\nexport class Dataflow<Schemes extends ClassicScheme> {\n  setups = new Map<NodeId, DataflowNodeSetup<any, any, any>>()\n\n  /**\n   * @param editor NodeEditor instance\n   */\n  constructor(private editor: NodeEditor<Schemes>) { }\n\n  /**\n   * Adds the node to the dataflow.\n   * @param node Node instance\n   * @param setup Set of functions that define how to process the node\n   */\n  public add<T extends Schemes['Node']>(node: T, setup: DataflowNodeSetup<T, any, any>) {\n    const affected = this.setups.get(node.id)\n\n    if (affected) {\n      throw new Error('already processed')\n    }\n    this.setups.set(node.id, setup)\n  }\n\n  /**\n   * Removes the node from the dataflow.\n   * @param nodeId Node id\n   */\n  public remove(nodeId: NodeId) {\n    this.setups.delete(nodeId)\n  }\n\n  /**\n   * Fetches inputs of the node.\n   * Unlike `fetch` method, this method doesn't call `data` function of the specified node (but does call `data` for predecessor nodes recursively).\n   * @param nodeId Node id\n   * @returns Object with inputs\n   */\n  public async fetchInputs(nodeId: NodeId) {\n    const result = this.setups.get(nodeId)\n\n    if (!result) throw new Error('node is not initialized')\n\n    const inputKeys = result.inputs()\n\n    const cons = this.editor.getConnections().filter(c => {\n      return c.target === nodeId && inputKeys.includes(c.targetInput)\n    })\n\n    const inputs: Record<string, any> = {}\n    const consWithSourceData = await Promise.all(cons.map(async c => {\n      return {\n        c,\n        sourceData: await this.fetch(c.source)\n      }\n    }))\n\n    for (const { c, sourceData } of consWithSourceData) {\n      const previous = inputs[c.targetInput] ? inputs[c.targetInput] : []\n\n      inputs[c.targetInput] = [...previous, sourceData[c.sourceOutput]]\n    }\n\n    return inputs\n  }\n\n  /**\n   * Fetches outputs of the node.\n   * This method recursively calls `data` function of the predecessor nodes until receives all of the required inputs and calls `data` function of the specified node.\n   * @param nodeId Node id\n   * @returns Object with outputs\n   */\n  public async fetch(nodeId: NodeId): Promise<Record<string, any>> {\n    const result = this.setups.get(nodeId)\n\n    if (!result) throw new Error('node is not initialized')\n\n    const outputKeys = result.outputs()\n    const data = await result.data(() => this.fetchInputs(nodeId))\n\n    const returningKeys = Object.keys(data) as (string | number | symbol)[]\n\n    if (!outputKeys.every(key => returningKeys.includes(key))) {\n      throw new Error(`dataflow node \"${nodeId}\" doesn't return all of required properties. Expected \"${outputKeys.join('\", \"')}\". Got \"${returningKeys.join('\", \"')}\"`)\n    }\n\n    return data\n  }\n}\n","export class Cache<Key, T> {\n  cache = new Map<Key, T>()\n\n  constructor(private onDelete?: (item?: T) => void) {}\n\n  get(key: Key) {\n    return this.cache.get(key)\n  }\n\n  add(key: Key, data: T) {\n    if (this.cache.has(key)) throw new Error('cache already exists')\n\n    this.cache.set(key, data)\n  }\n\n  patch(key: Key, data: T) {\n    this.cache.set(key, data)\n  }\n\n  delete(key: Key) {\n    const item = this.cache.get(key)\n\n    this.cache.delete(key)\n    this.onDelete && this.onDelete(item)\n  }\n\n  clear() {\n    Array.from(this.cache.keys()).forEach(item => {\n      this.delete(item)\n    })\n  }\n}\n","/**\n * Cancelled exception. Thrown when `reset` is called while fetching data.\n */\nexport class Cancelled extends Error {\n  constructor() {\n    super('cancelled')\n  }\n}\n\nexport type Cancellable<T> = Promise<T> & { cancel?: () => void }\ntype S<A, B> = (data: A) => B | PromiseLike<B>\n\nfunction createCancellblePromise<A, B>(...sequence: [S<void, A>, S<A, B>]): Cancellable<B>\nfunction createCancellblePromise<A, B, C>(...sequence: [S<void, A>, S<A, B>, S<B, C>]): Cancellable<C>\nfunction createCancellblePromise(...sequence: S<any, any>[]): Cancellable<any> {\n  let cancelled = false\n\n  function commit<R>(value: R): R {\n    if (cancelled) {\n      throw new Cancelled()\n    }\n    return value\n  }\n\n  // eslint-disable-next-line init-declarations\n  let reject: (reason?: any) => void\n\n  const promise: Cancellable<void> = new Promise<void>((res, rej) => {\n    reject = rej\n    res()\n  })\n\n  const n = (sequence as S<any, any>[]).reduce((p, item) => {\n    const t = p.then(item as any).then(commit)\n\n    return t\n  }, promise)\n\n  n.cancel = () => {\n    if (!cancelled) reject(new Cancelled())\n    cancelled = true\n  }\n\n  return n\n}\n\nexport {\n  createCancellblePromise\n}\n","import { GetSchemes, NodeEditor, NodeId, Root, Scope } from 'rete'\n\nimport { Dataflow } from './dataflow'\nimport { ClassicScheme } from './types'\nimport { Cache } from './utils/cache'\nimport { Cancellable, createCancellblePromise } from './utils/cancellable'\n\nexport type DataflowNode = { data(inputs: Record<string, any>): Promise<Record<string, any>> | Record<string, any> }\nexport type DataflowEngineScheme = GetSchemes<\n  ClassicScheme['Node'] & DataflowNode,\n  ClassicScheme['Connection']\n>\n\ntype Configure<Schemes extends DataflowEngineScheme> = (node: Schemes['Node']) => ({\n  inputs: () => string[]\n  outputs: () => string[]\n})\n\n/**\n * DataflowEngine is a plugin that integrates Dataflow with NodeEditor making it easy to use.\n * Additionally, it provides a cache for the data of each node in order to avoid recurring calculations.\n * @priority 10\n * @listens nodecreated\n * @listens noderemoved\n */\nexport class DataflowEngine<Schemes extends DataflowEngineScheme> extends Scope<never, [Root<Schemes>]> {\n  editor!: NodeEditor<Schemes>\n  dataflow?: Dataflow<Schemes>\n  cache = new Cache<NodeId, Cancellable<Record<string, any>>>(data => data?.cancel && data.cancel())\n\n  constructor(private configure?: Configure<Schemes>) {\n    super('dataflow-engine')\n\n    this.addPipe(context => {\n      if (context.type === 'nodecreated') {\n        this.add(context.data)\n      }\n      if (context.type === 'noderemoved') {\n        this.remove(context.data)\n      }\n      return context\n    })\n  }\n\n  setParent(scope: Scope<Root<Schemes>>): void {\n    super.setParent(scope)\n\n    this.editor = this.parentScope<NodeEditor<Schemes>>(NodeEditor)\n    this.dataflow = new Dataflow(this.editor)\n  }\n\n  private getDataflow() {\n    if (!this.dataflow) throw new Error(`DataflowEngine isn't attached to NodeEditor`)\n    return this.dataflow\n  }\n\n  private add(node: Schemes['Node']) {\n    const options = this.configure\n      ? this.configure(node)\n      : { inputs: () => Object.keys(node.inputs), outputs: () => Object.keys(node.outputs) }\n\n    this.getDataflow().add(node, {\n      inputs: options.inputs,\n      outputs: options.outputs,\n      data: async (fetchInputs) => {\n        const cache = this.cache.get(node.id)\n\n        if (cache) return cache\n\n        const cancellable = createCancellblePromise(\n          () => fetchInputs(),\n          inputs => node.data(inputs)\n        )\n\n        this.cache.add(node.id, cancellable)\n\n        return cancellable\n      }\n    })\n  }\n\n  private remove(node: Schemes['Node']) {\n    this.getDataflow().remove(node.id)\n  }\n\n  /**\n   * Resets the cache of the node and all its predecessors.\n   * @param nodeId Node id to reset. If not specified, all nodes will be reset.\n   */\n  public reset(nodeId?: NodeId) {\n    if (nodeId) {\n      const setup = this.getDataflow().setups.get(nodeId)\n\n      if (!setup) throw 'setup'\n\n      const outputKeys = setup.outputs()\n\n      this.cache.delete(nodeId)\n      this.editor.getConnections()\n        .filter(c => c.source === nodeId && outputKeys.includes(c.sourceOutput))\n        .forEach(c => this.reset(c.target))\n    } else {\n      this.cache.clear()\n    }\n  }\n\n  /**\n   * Fetches input data for the node by fetching data for all its predecessors recursively.\n   * @param nodeId Node id to fetch input data for\n   * @throws `Cancelled when `reset` is called while fetching data\n   */\n  public async fetchInputs(nodeId: NodeId) {\n    return this.getDataflow().fetchInputs(nodeId)\n  }\n\n  /**\n   * Fetches output data of the node\n   * @param nodeId Node id to fetch data from\n   * @throws `Cancelled` when `reset` is called while fetching data\n   */\n  public async fetch(nodeId: NodeId) {\n    return this.getDataflow().fetch(nodeId)\n  }\n}\n"],"names":["ControlFlow","editor","_classCallCheck","_defineProperty","Map","_createClass","key","value","add","node","setup","affected","setups","get","id","Error","set","remove","nodeId","execute","input","_this","inputKeys","inputs","includes","output","outputKeys","outputs","cons","getConnections","filter","c","source","sourceOutput","forEach","con","target","targetInput","ControlFlowEngine","_Scope","_inherits","_super","_createSuper","configure","call","addPipe","context","type","data","setParent","scope","_get","_getPrototypeOf","prototype","parentScope","NodeEditor","controlflow","options","Object","keys","forward","String","Scope","Dataflow","_fetchInputs","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","result","consWithSourceData","_iterator","_step","_step$value","sourceData","previous","wrap","_callee2$","_context2","prev","next","Promise","all","map","_ref","_callee","_callee$","_context","t0","fetch","t1","sent","abrupt","stop","_x2","apply","arguments","_createForOfIteratorHelper","s","n","done","concat","_toConsumableArray","err","e","f","fetchInputs","_x","_fetch","_callee3","_this2","returningKeys","_callee3$","_context3","every","join","_x3","Cache","onDelete","cache","has","patch","_delete","item","clear","Array","from","Cancelled","_Error","_wrapNativeSuper","createCancellblePromise","cancelled","commit","reject","promise","res","rej","_len","length","sequence","_key","reduce","p","t","then","cancel","DataflowEngine","_assertThisInitialized","dataflow","getDataflow","_data","cancellable","reset","_this3"],"mappings":"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"}