/**
 * Cancelled exception. Thrown when `reset` is called while fetching data.
 */
export declare class Cancelled extends Error {
    constructor();
}
export declare type Cancellable<T> = Promise<T> & {
    cancel?: () => void;
};
declare type S<A, B> = (data: A) => B | PromiseLike<B>;
declare function createCancellblePromise<A, B>(...sequence: [S<void, A>, S<A, B>]): Cancellable<B>;
declare function createCancellblePromise<A, B, C>(...sequence: [S<void, A>, S<A, B>, S<B, C>]): Cancellable<C>;
export { createCancellblePromise };
//# sourceMappingURL=cancellable.d.ts.map