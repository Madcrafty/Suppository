{"version":3,"file":"rete-scopes-plugin.common.js","sources":["src/ordering.ts","src/sizing.ts","src/scope.ts","src/utils.ts","src/validation.ts","src/agents/classic/index.ts","src/presets/classic/index.ts","src/presets/index.ts","src/index.ts"],"sourcesContent":["import { ConnectionId, NodeEditor, NodeId } from 'rete'\nimport { BaseArea, BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ExpectedScheme } from './types'\n\ntype Props<T> = { editor: NodeEditor<ExpectedScheme>, area: BaseAreaPlugin<ExpectedScheme, BaseArea<ExpectedScheme> | T> }\n\nfunction bringConnectionForward<T>(id: ConnectionId, props: Props<T>) {\n  const view = props.area.connectionViews.get(id)\n\n  if (view) {\n    props.area.area.content.reorder(view.element, null)\n  }\n}\n\nfunction bringConnectionBack<T>(id: ConnectionId, props: Props<T>) {\n  const view = props.area.connectionViews.get(id)\n  const { content } = props.area.area\n\n  if (view) {\n    content.reorder(view.element, content.holder.firstChild)\n  }\n}\n\nfunction bringForward<T>(nodeId: NodeId, props: Props<T>) {\n  const view = props.area.nodeViews.get(nodeId)\n  const connections = props.editor.getConnections().filter(c => {\n    return nodeId === c.source || nodeId === c.target\n  })\n  const children = props.editor.getNodes().filter(n => {\n    return n.parent === nodeId\n  })\n\n  connections.forEach(connection => bringConnectionForward(connection.id, props))\n\n  if (view) {\n    props.area.area.content.reorder(view.element, null)\n  }\n\n  children.forEach(child => bringForward(child.id, props))\n}\n\nexport function useOrdering<T>(props: Props<T>) {\n  // eslint-disable-next-line max-statements\n  props.area.addPipe(async context => {\n    if (!('type' in context)) return context\n    if (context.type === 'nodepicked') {\n      bringForward(context.data.id, props)\n    }\n    if (context.type === 'connectioncreated') {\n      const { id } = context.data\n      const connection = props.editor.getConnection(id)\n\n      if (!connection) throw new Error('connection was removed')\n      bringConnectionBack(context.data.id, props)\n      bringForward(connection.source, props)\n      bringForward(connection.target, props)\n    }\n    return context\n  })\n}\n","import { NodeEditor } from 'rete'\nimport { BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { AgentParams } from './agents/types'\nimport { ExpectedScheme } from './types'\n\ntype Props<T> = { editor: NodeEditor<ExpectedScheme>, area: BaseAreaPlugin<ExpectedScheme, T> }\n\nexport function getNodesBoundingBox<T>(nodes: ExpectedScheme['Node'][], { area }: Props<T>) {\n  const boxes = nodes.map(node => {\n    const view = area.nodeViews.get(node.id)\n\n    if (!view) throw new Error('view')\n\n    return {\n      position: view.position,\n      width: node.width,\n      height: node.height\n    }\n  })\n\n  const left = Math.min(...boxes.map(b => b.position.x))\n  const right = Math.max(...boxes.map(b => b.position.x + b.width))\n  const top = Math.min(...boxes.map(b => b.position.y))\n  const bottom = Math.max(...boxes.map(b => b.position.y + b.height))\n  const width = right - left\n  const height = bottom - top\n\n  return {\n    top,\n    left,\n    right,\n    bottom,\n    width,\n    height\n  }\n}\n\ntype Size = { width: number, height: number }\n\nexport function updateNodeSizes<T>(node: ExpectedScheme['Node'], size: Size, { area }: Props<T>) {\n  const { width, height } = size\n\n  node.width = width\n  node.height = height\n\n  area.resize(node.id, width, height)\n}\n\n// eslint-disable-next-line max-statements\nexport async function resizeParent<T>(parent: ExpectedScheme['Node'], agentParams: AgentParams, props: Props<T>) {\n  const { id } = parent\n  const children = props.editor.getNodes()\n    .filter(child => child.parent === id)\n    .filter(node => !agentParams.exclude(node.id))\n  const padding = agentParams.padding(id)\n\n  if (children.length === 0) {\n    const size = agentParams.size(id, {\n      width: padding.left + padding.right,\n      height: padding.top + padding.bottom\n    })\n\n    updateNodeSizes(parent, size, props)\n  } else {\n    const { top, left, width, height } = getNodesBoundingBox(children, props)\n\n    const outerWidth = width + padding.left + padding.right\n    const outerHeight = height + padding.top + padding.bottom\n    const outerTop = top - padding.top\n    const outerLeft = left - padding.left\n\n    updateNodeSizes(parent, agentParams.size(id, { width: outerWidth, height: outerHeight }), props)\n    await agentParams.translate(parent.id, outerLeft, outerTop)\n  }\n  if (parent.parent) {\n    const parentsParent = props.editor.getNode(parent.parent)\n\n    if (parentsParent) {\n      await resizeParent(parentsParent, agentParams, props)\n    }\n  }\n}\n","import { NodeEditor, NodeId } from 'rete'\nimport { BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { AgentParams } from './agents/types'\nimport { resizeParent } from './sizing'\nimport { ExpectedScheme, Position } from './types'\n\ntype Props<T> = { editor: NodeEditor<ExpectedScheme>, area: BaseAreaPlugin<ExpectedScheme, T> }\n\n// eslint-disable-next-line max-statements, max-len\nexport async function reassignParent<T>(ids: NodeId[], pointer: { x: number, y: number }, agentParams: AgentParams, props: Props<T>) {\n  if (!ids.length) return\n  const nodes = ids\n    .map(id => props.editor.getNode(id))\n    .filter((n): n is ExpectedScheme['Node'] => Boolean(n))\n\n  const overlayNodes = props.editor.getNodes()\n    .map(node => {\n      const view = props.area.nodeViews.get(node.id)\n\n      if (!view) throw new Error('node view')\n\n      return { node, view }\n    }).filter(({ node, view }) => {\n      return !ids.includes(node.id)\n        && pointer.x > view.position.x\n        && pointer.y > view.position.y\n        && pointer.x < view.position.x + node.width\n        && pointer.y < view.position.y + node.height\n    })\n  const areaElements = Array.from(props.area.area.content.holder.childNodes)\n  const overlayNodesWithIndex = overlayNodes.map(({ node, view }) => {\n    const index = areaElements.indexOf(view.element)\n\n    return { node, view, index }\n  })\n\n  overlayNodesWithIndex.sort((a, b) => b.index - a.index)\n  const topOverlayParent = overlayNodesWithIndex[0]\n\n  const formerParents = nodes\n    .map(node => node.parent)\n    .filter((id): id is string => Boolean(id))\n    .map(id => {\n      const node = props.editor.getNode(id)\n\n      if (!node) throw new Error('node')\n\n      return node\n    })\n\n  // eslint-disable-next-line no-undefined\n  nodes.forEach(node => node.parent = undefined)\n  if (topOverlayParent) {\n    nodes.forEach(node => node.parent = topOverlayParent.node.id)\n    await resizeParent(topOverlayParent.node, agentParams, props)\n  }\n\n  for (const formerParent of formerParents) {\n    await resizeParent(formerParent, agentParams, props)\n  }\n}\n\nexport async function translateChildren<T>(id: NodeId, { position, previous }: { position: Position, previous: Position }, props: Props<T>) {\n  const children = props.editor.getNodes().filter(n => n.parent === id)\n\n  await Promise.all(children.map(async n => {\n    const dx = position.x - previous.x\n    const dy = position.y - previous.y\n\n    const view = props.area.nodeViews.get(n.id)\n    const node = props.editor.getNode(n.id)\n\n    if (view && node && !node.selected) {\n      const nodePosition = view.position\n\n      await view.translate(nodePosition.x + dx, nodePosition.y + dy)\n    }\n  }))\n}\n","import { BaseSchemes, NodeEditor, NodeId } from 'rete'\nimport { BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ExpectedScheme } from './types'\n\ntype Props<T> = { editor: NodeEditor<ExpectedScheme>, area: BaseAreaPlugin<ExpectedScheme, T> }\n\nexport function belongsTo<T>(nodeId: NodeId, ids: NodeId[], props: Props<T>) {\n  const node = props.editor.getNode(nodeId)\n\n  if (!node) throw new Error('node')\n\n  if (ids.includes(nodeId)) return true\n  if (!node.parent) return false\n  if (belongsTo(node.parent, ids, props)) return true\n}\n\nexport function hasSelectedParent<T>(nodeId: NodeId, props: Props<T>): boolean {\n  const node = props.editor.getNode(nodeId)\n\n  if (!node) throw new Error('node')\n\n  if (!node.parent) return false\n\n  const parent = props.editor.getNode(node.parent)\n\n  if (!parent) throw new Error('node')\n\n  if (parent.selected) return true\n\n  return hasSelectedParent(node.parent, props)\n}\n\nexport type Translate = (nodeId: string, x: number, y: number) => Promise<void>\n\n/**\n * keep track of currently moving nodes (to prevent infinite loop)\n */\nexport function trackedTranslate<T>(props: Props<T>): {\n  translate: Translate,\n  isTranslating: (id: NodeId) => boolean\n} {\n  const active = new Map<NodeId, number>()\n  const increment = (id: NodeId) => active.set(id, (active.get(id) || 0) + 1)\n  const decrement = (id: NodeId) => active.set(id, (active.get(id) || 0) - 1)\n\n  return {\n    async translate(id, x, y) {\n      const view = props.area.nodeViews.get(id)\n\n      if (!view) throw new Error('cannot find parent node view')\n\n      const previous = view.position\n\n      if (previous.x !== x || previous.y !== y) {\n        increment(id)\n        await view.translate(x, y)\n        decrement(id)\n      }\n    },\n    isTranslating(id) {\n      return (active.get(id) || 0) > 0\n    }\n  }\n}\n\nexport function watchClearing(editor: NodeEditor<BaseSchemes>) {\n  let state = false\n\n  editor.addPipe(context => {\n    if (context.type === 'clear') {\n      state = true\n    }\n    if (context.type === 'cleared' || context.type === 'clearcancelled') {\n      state = false\n    }\n    return context\n  })\n\n  return () => state\n}\n","import { NodeEditor } from 'rete'\nimport { BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ExpectedScheme } from './types'\nimport { watchClearing } from './utils'\n\ntype Props<T> = { editor: NodeEditor<ExpectedScheme>, area: BaseAreaPlugin<ExpectedScheme, T> }\n\nexport function useValidator<T>(props: Props<T>) {\n  const isClearing = watchClearing(props.editor)\n\n  // eslint-disable-next-line max-statements\n  props.area.addPipe(context => {\n    if (!context || !(typeof context === 'object' && 'type' in context)) return context\n    if (context.type === 'nodecreate') {\n      const parentId = context.data.parent\n\n      if (parentId) {\n        const parent = props.editor.getNodes().find(n => n.id === parentId)\n\n        if (!parent) throw new Error('parent node doesnt exist')\n      }\n    }\n    if (context.type === 'noderemove' && !isClearing()) {\n      const { id } = context.data\n\n      const child = props.editor.getNodes().find(n => n.parent === id)\n\n      if (child) throw new Error('cannot remove parent node with a children')\n    }\n    return context\n  })\n}\n","import { NodeId } from 'rete'\n\nimport { getPickedNodes } from '../..'\nimport { reassignParent } from '../../scope'\nimport { Position } from '../../types'\nimport { AgentContext, AgentParams, ScopeAgent } from '../types'\n\nexport type DefaultScopesAgentParams = AgentParams & {\n  timeout?: number\n}\n\nexport const useScopeAgent: ScopeAgent = (params: DefaultScopesAgentParams, { area, editor, scopes }) => {\n  const timeout = params.timeout || 250\n\n  let picked: { timeout: number } | null = null\n  let candidates: string[] = []\n\n  function cancel() {\n    if (picked) {\n      window.clearTimeout(picked.timeout)\n      picked = null\n    }\n  }\n\n  function pick(id: NodeId) {\n    const timeoutId = window.setTimeout(() => {\n      const selected = editor.getNodes().filter(n => n.selected)\n      const targets = selected.length ? selected.map(n => n.id) : [id]\n\n      candidates.push(...targets)\n      scopes.emit({ type: 'scopepicked', data: { ids: targets } })\n    }, timeout)\n\n    picked = { timeout: timeoutId }\n  }\n  function release() {\n    const list = [...candidates]\n\n    cancel()\n    candidates = []\n\n    scopes.emit({ type: 'scopereleased', data: { ids: list } })\n\n    return list\n  }\n\n  area.addPipe(async context => {\n    if (!('type' in context)) return context\n    if (context.type === 'nodepicked') {\n      pick(context.data.id)\n    }\n    if (context.type === 'nodetranslated') {\n      cancel()\n    }\n    if (context.type === 'nodedragged') {\n      const { pointer } = area.area\n      const ids = release()\n\n      await reassignParent(ids, pointer, params, { area, editor })\n    }\n    return context\n  })\n}\n\nexport function useVisualEffects<T>({ area, editor, scopes }: AgentContext<T>): void {\n  const pickedNodes = getPickedNodes(scopes)\n  let previousHighlighted: string | null = null\n  let clientPointerPostion: Position | null = null\n\n  // eslint-disable-next-line max-statements\n  function updateHighlightedScopes(position: { x: number, y: number }, nodes: NodeId[]) {\n    if (previousHighlighted) {\n      const view = area.nodeViews.get(previousHighlighted)\n\n      if (view && nodes.length) view.element.style.opacity = '0.4'\n      previousHighlighted = null\n    }\n    if (nodes.length) {\n      const { x, y } = position\n      const elements = document.elementsFromPoint(x, y)\n      const nodeViews = editor.getNodes().map(node => {\n        const view = area.nodeViews.get(node.id)\n\n        if (!view) throw new Error('view')\n\n        return {\n          node,\n          view\n        }\n      })\n\n      const intersectedNodes = elements\n        .map(el => nodeViews.find(item => item.view.element === el))\n        .filter((item): item is Exclude<typeof item, undefined> => Boolean(item))\n\n      const nonSelected = intersectedNodes\n        .filter(item => !item.node.selected)\n      const first = nonSelected[0]\n\n      if (first) {\n        first.view.element.style.opacity = '0.8'\n        previousHighlighted = first.node.id\n      }\n    }\n  }\n  // eslint-disable-next-line max-statements\n  scopes.addPipe(context => {\n    if (context.type === 'scopepicked') {\n      const { ids } = context.data\n\n      editor.getNodes().filter(n => !ids.includes(n.id)).forEach(node => {\n        const view = area.nodeViews.get(node.id)\n\n        if (view) view.element.style.opacity = '0.4'\n      })\n      if (clientPointerPostion) updateHighlightedScopes(clientPointerPostion, pickedNodes)\n    }\n    if (context.type === 'scopereleased') {\n      const { ids } = context.data\n\n      editor.getNodes().filter(n => !ids.includes(n.id)).forEach(node => {\n        const view = area.nodeViews.get(node.id)\n\n        if (view) view.element.style.opacity = ''\n      })\n      if (clientPointerPostion) updateHighlightedScopes(clientPointerPostion, pickedNodes)\n    }\n    if (context.type === 'pointermove') {\n      clientPointerPostion = {\n        x: context.data.event.clientX,\n        y: context.data.event.clientY\n      }\n      updateHighlightedScopes(clientPointerPostion, pickedNodes)\n    }\n    return context\n  })\n}\n","import { classic } from '../../agents'\nimport { Preset } from '../types'\n\n/**\n * Classic preset allowing capturing a node by long-pressing it and dropping it onto another node to make it a nested.\n * @returns Preset\n * @listens nodepicked\n * @listens nodetranslated\n * @listens nodedragged\n * @emits scopepicked\n * @emits scopereleased\n */\nexport function setup(): Preset {\n  return (params, context) => {\n    classic.useScopeAgent(params, context)\n    classic.useVisualEffects(context)\n  }\n}\n","/**\n * Presets for scopes plugin.\n * @module\n */\n\nexport * as classic from './classic'\n","import { NodeEditor, NodeId, Root, Scope } from 'rete'\nimport { BaseArea, BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { useOrdering } from './ordering'\nimport { Preset } from './presets/types'\nimport { translateChildren } from './scope'\nimport { resizeParent } from './sizing'\nimport { ExpectedScheme, Padding, Size } from './types'\nimport { belongsTo, hasSelectedParent, trackedTranslate } from './utils'\nimport { useValidator } from './validation'\n\nexport * as Presets from './presets'\n\n/**\n * Props for `ScopesPlugin` class.\n */\nexport type Props = {\n  /** Padding (space) between the scope's border and its children. Default is `() => ({ top: 40, left: 20, right: 20, bottom: 20 })` */\n  padding?: (id: NodeId) => Padding\n  /** Determines whether the nested node should be excluded from affecting the scope's size, etc. Default is `() => false` */\n  exclude?: (id: NodeId) => boolean\n  /** Customizes the size of the node which is recognized as a parent. Default is `(id, size) => size` */\n  size?: (id: NodeId, size: Size) => Size\n}\n\ntype Requires<Schemes extends ExpectedScheme> =\n  | BaseArea<Schemes>\n\n/**\n * Signal types produced by ConnectionPlugin instance\n * @priority 10\n */\nexport type Scopes =\n  | { type: 'scopepicked', data: { ids: NodeId[] } }\n  | { type: 'scopereleased', data: { ids: NodeId[] } }\n\n/**\n * Scope plugin. Responsible for user interaction with scopes (nested nodes, groups)\n * @priority 9\n * @listens nodetranslated\n * @listens noderemoved\n * @emits scopepicked\n * @emits scopereleased\n */\nexport class ScopesPlugin<Schemes extends ExpectedScheme, T = never> extends Scope<Scopes, [Requires<Schemes>, Root<Schemes>]> {\n  padding: (id: NodeId) => Padding\n  exclude: (id: NodeId) => boolean\n  size: (id: NodeId, size: Size) => Size\n  editor!: NodeEditor<Schemes>\n  area!: BaseAreaPlugin<Schemes, T>\n  presets: Preset[] = []\n\n  constructor(props?: Props) {\n    super('scopes')\n    this.padding = props?.padding || (() => ({\n      top: 40,\n      left: 20,\n      right: 20,\n      bottom: 20\n    }))\n    this.exclude = props?.exclude || (() => false)\n    this.size = props?.size || ((id, size) => size)\n  }\n\n  // eslint-disable-next-line max-statements\n  setParent(scope: Scope<BaseArea<Schemes>, [Root<Schemes>]>): void {\n    super.setParent(scope)\n\n    this.area = this.parentScope<BaseAreaPlugin<Schemes, T>>(BaseAreaPlugin)\n    this.editor = this.area.parentScope<NodeEditor<Schemes>>(NodeEditor)\n\n    const props = { editor: this.editor, area: this.area }\n    const { padding, size, exclude } = this\n    const pickedNodes = getPickedNodes(this)\n    const { translate, isTranslating } = trackedTranslate(props)\n    const agentParams = { padding, size, exclude, translate }\n\n    useValidator(props)\n    useOrdering(props)\n\n    this.presets.forEach(preset => {\n      preset(agentParams, { ...props, scopes: this })\n    })\n\n    // eslint-disable-next-line max-statements, complexity\n    this.addPipe(async context => {\n      if (context.type === 'nodetranslated') {\n        const { id } = context.data\n        const current = props.editor.getNode(id)\n\n        if (!current) throw new Error('cannot find node')\n        // prevent translating children if the node translation\n        // is triggered by its resizing (when its children moved)\n        if (!isTranslating(id)) {\n          await translateChildren(id, context.data, props)\n        }\n\n        const parent = current.parent ? props.editor.getNode(current.parent) : null\n\n        if (parent && !agentParams.exclude(id)) {\n          const hasAnySelectedParent = hasSelectedParent(id, props)\n          const isPicked = belongsTo(current.id, pickedNodes, props)\n\n          if (!hasAnySelectedParent && !isPicked) {\n            await resizeParent(parent, agentParams, props)\n          }\n        }\n      }\n      if (context.type === 'noderemoved') {\n        const parentId = context.data.parent\n        const parent = parentId && props.editor.getNode(parentId)\n\n        if (parent) {\n          await resizeParent(parent, agentParams, props)\n        }\n      }\n      return context\n    })\n  }\n\n  /**\n   * Adds a preset to the plugin.\n   * @param preset Preset that is responsible for user interactions with scopes (e.g. assigning nodes to scopes)\n   */\n  public addPreset(preset: Preset) {\n    this.presets.push(preset)\n  }\n\n  public isDependent(id: NodeId) {\n    const props = { editor: this.editor, area: this.area }\n    const node = this.editor.getNode(id)\n\n    return node && (node.selected || hasSelectedParent(id, props))\n  }\n}\n\nexport function getPickedNodes<S extends ExpectedScheme>(scopes: Scope<Scopes, [Requires<S>, Root<S>]>) {\n  const nodes: NodeId[] = []\n\n  scopes.addPipe(async context => {\n    if (!('type' in context)) return context\n    if (context.type === 'scopepicked') {\n      nodes.push(...context.data.ids)\n    }\n    if (context.type === 'scopereleased') {\n      nodes.splice(0, nodes.length, ...nodes.filter(id => !context.data.ids.includes(id)))\n    }\n    return context\n  })\n  return nodes\n}\n"],"names":["bringConnectionForward","id","props","view","area","connectionViews","get","content","reorder","element","bringConnectionBack","holder","firstChild","bringForward","nodeId","nodeViews","connections","editor","getConnections","filter","c","source","target","children","getNodes","n","parent","forEach","connection","child","useOrdering","addPipe","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","context","wrap","_callee$","_context","prev","next","abrupt","type","data","getConnection","Error","stop","_x","apply","arguments","getNodesBoundingBox","nodes","boxes","map","node","position","width","height","left","Math","min","_toConsumableArray","b","x","right","max","top","y","bottom","updateNodeSizes","size","_ref2","resize","resizeParent","_x2","_x3","_resizeParent","agentParams","padding","_getNodesBoundingBox","outerWidth","outerHeight","outerTop","outerLeft","parentsParent","exclude","length","translate","getNode","reassignParent","_x4","_reassignParent","ids","pointer","overlayNodes","areaElements","overlayNodesWithIndex","topOverlayParent","formerParents","_iterator","_step","formerParent","Boolean","includes","Array","from","childNodes","_ref3","index","indexOf","sort","a","undefined","_createForOfIteratorHelper","s","done","value","t0","e","f","finish","translateChildren","_x5","_x6","_x7","_translateChildren","_callee3","previous","_callee3$","_context3","Promise","all","_ref4","_callee2","dx","dy","nodePosition","_callee2$","_context2","selected","_x8","belongsTo","hasSelectedParent","trackedTranslate","active","Map","increment","set","decrement","isTranslating","watchClearing","state","useValidator","isClearing","_typeof","parentId","find","useScopeAgent","params","scopes","timeout","picked","candidates","cancel","window","clearTimeout","pick","timeoutId","setTimeout","_candidates","targets","push","emit","release","list","useVisualEffects","pickedNodes","getPickedNodes","previousHighlighted","clientPointerPostion","updateHighlightedScopes","style","opacity","elements","document","elementsFromPoint","intersectedNodes","el","item","nonSelected","first","event","clientX","clientY","setup","classic","ScopesPlugin","_Scope","_inherits","_super","_createSuper","_this","_classCallCheck","call","_defineProperty","_assertThisInitialized","_createClass","key","setParent","scope","_this2","_get","_getPrototypeOf","prototype","parentScope","BaseAreaPlugin","NodeEditor","_trackedTranslate","presets","preset","_objectSpread","_id","current","hasAnySelectedParent","isPicked","_parent","addPreset","isDependent","Scope","splice","concat"],"mappings":"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"}