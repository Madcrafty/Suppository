import { ConnectionId, NodeId, Scope, ScopeAsParameter } from 'rete';
import { ExpectSchemes, Position } from '../../types';
export declare type Pin = {
    id: string;
    position: Position;
    selected?: boolean;
};
export declare type PinData = {
    id: ConnectionId;
    pins: Pin[];
};
declare type Comment = {
    element: HTMLElement;
    id: string;
    width: number;
    height: number;
    x: number;
    y: number;
};
declare type Requires = {
    type: 'commentcreated';
    data: Comment;
} | {
    type: 'commentremoved';
    data: Comment;
} | {
    type: 'editcomment';
    data: Comment;
} | {
    type: 'commentselected';
    data: Comment;
} | {
    type: 'commentunselected';
    data: Comment;
} | {
    type: 'commenttranslated';
    data: {
        id: Comment['id'];
        dx: number;
        dy: number;
        sources?: NodeId[];
    };
} | {
    type: 'commentlinktranslate';
    data: {
        id: Comment['id'];
        link: string;
    };
};
/**
 * Form generator for embedding rete-comment-plugin into 3D scene.
 * @param scope Area3DPlugin instance
 */
export declare function comment<S extends ExpectSchemes, K>(scope: ScopeAsParameter<Scope<K, any[]>, [Requires]>): void;
export {};
//# sourceMappingURL=comment.d.ts.map