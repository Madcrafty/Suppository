import { BaseSchemes, Scope, ScopeAsParameter } from 'rete';
import { BufferGeometry } from 'three';
import { ExpectSchemes } from '../../../types';
import { createClassicConnectionGeometry } from './geometry';
export { createClassicConnectionGeometry };
declare type Position = {
    x: number;
    y: number;
};
declare type Requires<Schemes extends BaseSchemes> = {
    type: 'connectionpath';
    data: {
        payload: Schemes['Connection'];
        path?: string;
        points: Position[];
    };
};
/**
 * Options for node form generator
 */
export declare type Props = {
    /** Customize connection geometry */
    customize?: (path: string) => BufferGeometry;
};
/**
 * Form generator for embedding connections into 3D scene.
 * @param scope Area3DPlugin instance
 * @param props Options for connection form generator
 */
export declare function connection<S extends ExpectSchemes, K, E>(scope: ScopeAsParameter<Scope<K, E[]>, [Requires<S>]>, props?: Props): void;
//# sourceMappingURL=index.d.ts.map