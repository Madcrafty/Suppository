import { BaseSchemes, GetSchemes } from 'rete';
export declare type Position = {
    x: number;
    y: number;
};
export declare type Vector3D = {
    x: number;
    y: number;
    z: number;
};
export declare type Size = {
    width: number;
    height: number;
};
export declare type GetRenderTypes<Signals> = Extract<Signals, {
    type: 'render';
    data: any;
}> extends {
    type: 'render';
    data: {
        type: infer G;
    };
} ? (G extends string ? G : string) : string;
export declare type ExpectSchemes = GetSchemes<BaseSchemes['Node'] & Size, BaseSchemes['Connection']>;
//# sourceMappingURL=types.d.ts.map