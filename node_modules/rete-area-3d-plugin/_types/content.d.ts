import { BufferGeometry } from 'three';
import { HybridScene } from './scene';
import { ObjectHTML, ObjectHTMLMaterials } from './scene/ObjectHTML';
/**
 * Responsible for managing 2D content in the plane of 3D scene for a current editor
 */
export declare class Content<Scope> {
    private scene;
    private scope;
    private reordered;
    holder: HTMLElement;
    objects: WeakMap<HTMLElement, ObjectHTML>;
    constructor(scene: HybridScene<Scope>, scope: Scope, reordered: (target: HTMLElement) => Promise<unknown>);
    getPointerFrom(event: MouseEvent): {
        x: number;
        y: number;
    };
    /**
     * Add an HTML element to the 3D scene
     * @param element HTML element
     */
    add(element: HTMLElement, object?: ObjectHTML): void;
    /**
     * Reorder the given element in the 3D scene
     * @param target HTML element to reorder
     * @param next HTML element to insert before
     * @throws if `target` or `next` are not in the scene
     */
    reorder(target: HTMLElement, next: ChildNode | null): Promise<void>;
    /**
     * Remove an HTML element from the 3D scene
     * @param element HTML element
     */
    remove(element: HTMLElement): void;
    /**
     * Update the form (geometry) of the given element
     */
    updateGeometry(element: HTMLElement, geometry?: BufferGeometry | ((old?: BufferGeometry) => BufferGeometry | undefined)): void;
    /**
     * Update the material of the given element
     */
    updateMaterials(element: HTMLElement, materials?: ObjectHTMLMaterials): void;
}
//# sourceMappingURL=content.d.ts.map