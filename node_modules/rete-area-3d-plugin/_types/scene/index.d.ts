import { Object3D, PerspectiveCamera, Plane, Scene, Vector3 } from 'three';
import { DragControls, DraggableObject3D } from './Drag';
import { HybridRenderer } from './HybridRenderer';
import { OrbitControls } from './OrbitControls';
export { DraggableObject3D };
declare type DefaultObject3D = Object3D;
/**
 * HybridScene is a wrapper for Three.js Scene with some additional features such as:
 * - drag controls
 * - orbit controls
 * - camera
 * - renderer
 */
export declare class HybridScene<Scope> {
    private container;
    camera: PerspectiveCamera;
    renderer: HybridRenderer;
    root: Scene;
    canvases: Map<Scope, DefaultObject3D>;
    controls: DragControls;
    orbit: OrbitControls;
    constructor(container: HTMLElement);
    private createOrbitControls;
    private createDragControls;
    canvasToPlane(canvas: Object3D): Plane;
    addCanvasFor(scope: Scope): void;
    resize(width: number, height: number): void;
    /**
     * Render the frame. Can be directly used instead of `animate` extension.
     */
    render(): void;
    private getCanvasFor;
    add(object: Object3D, scope: Scope): void;
    remove(object: Object3D, scope: Scope): void;
    getPointerFrom(event: MouseEvent, scope: Scope): Vector3 | null;
}
//# sourceMappingURL=index.d.ts.map