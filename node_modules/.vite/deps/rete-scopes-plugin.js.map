{
  "version": 3,
  "sources": ["../../rete-scopes-plugin/src/ordering.ts", "../../rete-scopes-plugin/src/sizing.ts", "../../rete-scopes-plugin/src/scope.ts", "../../rete-scopes-plugin/src/utils.ts", "../../rete-scopes-plugin/src/validation.ts", "../../rete-scopes-plugin/src/agents/classic/index.ts", "../../rete-scopes-plugin/src/presets/classic/index.ts", "../../rete-scopes-plugin/src/presets/index.ts", "../../rete-scopes-plugin/src/index.ts"],
  "sourcesContent": ["import { ConnectionId, NodeEditor, NodeId } from 'rete'\nimport { BaseArea, BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ExpectedScheme } from './types'\n\ntype Props<T> = { editor: NodeEditor<ExpectedScheme>, area: BaseAreaPlugin<ExpectedScheme, BaseArea<ExpectedScheme> | T> }\n\nfunction bringConnectionForward<T>(id: ConnectionId, props: Props<T>) {\n  const view = props.area.connectionViews.get(id)\n\n  if (view) {\n    props.area.area.content.reorder(view.element, null)\n  }\n}\n\nfunction bringConnectionBack<T>(id: ConnectionId, props: Props<T>) {\n  const view = props.area.connectionViews.get(id)\n  const { content } = props.area.area\n\n  if (view) {\n    content.reorder(view.element, content.holder.firstChild)\n  }\n}\n\nfunction bringForward<T>(nodeId: NodeId, props: Props<T>) {\n  const view = props.area.nodeViews.get(nodeId)\n  const connections = props.editor.getConnections().filter(c => {\n    return nodeId === c.source || nodeId === c.target\n  })\n  const children = props.editor.getNodes().filter(n => {\n    return n.parent === nodeId\n  })\n\n  connections.forEach(connection => bringConnectionForward(connection.id, props))\n\n  if (view) {\n    props.area.area.content.reorder(view.element, null)\n  }\n\n  children.forEach(child => bringForward(child.id, props))\n}\n\nexport function useOrdering<T>(props: Props<T>) {\n  // eslint-disable-next-line max-statements\n  props.area.addPipe(async context => {\n    if (!('type' in context)) return context\n    if (context.type === 'nodepicked') {\n      bringForward(context.data.id, props)\n    }\n    if (context.type === 'connectioncreated') {\n      const { id } = context.data\n      const connection = props.editor.getConnection(id)\n\n      if (!connection) throw new Error('connection was removed')\n      bringConnectionBack(context.data.id, props)\n      bringForward(connection.source, props)\n      bringForward(connection.target, props)\n    }\n    return context\n  })\n}\n", "import { NodeEditor } from 'rete'\nimport { BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { AgentParams } from './agents/types'\nimport { ExpectedScheme } from './types'\n\ntype Props<T> = { editor: NodeEditor<ExpectedScheme>, area: BaseAreaPlugin<ExpectedScheme, T> }\n\nexport function getNodesBoundingBox<T>(nodes: ExpectedScheme['Node'][], { area }: Props<T>) {\n  const boxes = nodes.map(node => {\n    const view = area.nodeViews.get(node.id)\n\n    if (!view) throw new Error('view')\n\n    return {\n      position: view.position,\n      width: node.width,\n      height: node.height\n    }\n  })\n\n  const left = Math.min(...boxes.map(b => b.position.x))\n  const right = Math.max(...boxes.map(b => b.position.x + b.width))\n  const top = Math.min(...boxes.map(b => b.position.y))\n  const bottom = Math.max(...boxes.map(b => b.position.y + b.height))\n  const width = right - left\n  const height = bottom - top\n\n  return {\n    top,\n    left,\n    right,\n    bottom,\n    width,\n    height\n  }\n}\n\ntype Size = { width: number, height: number }\n\nexport function updateNodeSizes<T>(node: ExpectedScheme['Node'], size: Size, { area }: Props<T>) {\n  const { width, height } = size\n\n  node.width = width\n  node.height = height\n\n  area.resize(node.id, width, height)\n}\n\n// eslint-disable-next-line max-statements\nexport async function resizeParent<T>(parent: ExpectedScheme['Node'], agentParams: AgentParams, props: Props<T>) {\n  const { id } = parent\n  const children = props.editor.getNodes()\n    .filter(child => child.parent === id)\n    .filter(node => !agentParams.exclude(node.id))\n  const padding = agentParams.padding(id)\n\n  if (children.length === 0) {\n    const size = agentParams.size(id, {\n      width: padding.left + padding.right,\n      height: padding.top + padding.bottom\n    })\n\n    updateNodeSizes(parent, size, props)\n  } else {\n    const { top, left, width, height } = getNodesBoundingBox(children, props)\n\n    const outerWidth = width + padding.left + padding.right\n    const outerHeight = height + padding.top + padding.bottom\n    const outerTop = top - padding.top\n    const outerLeft = left - padding.left\n\n    updateNodeSizes(parent, agentParams.size(id, { width: outerWidth, height: outerHeight }), props)\n    await agentParams.translate(parent.id, outerLeft, outerTop)\n  }\n  if (parent.parent) {\n    const parentsParent = props.editor.getNode(parent.parent)\n\n    if (parentsParent) {\n      await resizeParent(parentsParent, agentParams, props)\n    }\n  }\n}\n", "import { NodeEditor, NodeId } from 'rete'\nimport { BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { AgentParams } from './agents/types'\nimport { resizeParent } from './sizing'\nimport { ExpectedScheme, Position } from './types'\n\ntype Props<T> = { editor: NodeEditor<ExpectedScheme>, area: BaseAreaPlugin<ExpectedScheme, T> }\n\n// eslint-disable-next-line max-statements, max-len\nexport async function reassignParent<T>(ids: NodeId[], pointer: { x: number, y: number }, agentParams: AgentParams, props: Props<T>) {\n  if (!ids.length) return\n  const nodes = ids\n    .map(id => props.editor.getNode(id))\n    .filter((n): n is ExpectedScheme['Node'] => Boolean(n))\n\n  const overlayNodes = props.editor.getNodes()\n    .map(node => {\n      const view = props.area.nodeViews.get(node.id)\n\n      if (!view) throw new Error('node view')\n\n      return { node, view }\n    }).filter(({ node, view }) => {\n      return !ids.includes(node.id)\n        && pointer.x > view.position.x\n        && pointer.y > view.position.y\n        && pointer.x < view.position.x + node.width\n        && pointer.y < view.position.y + node.height\n    })\n  const areaElements = Array.from(props.area.area.content.holder.childNodes)\n  const overlayNodesWithIndex = overlayNodes.map(({ node, view }) => {\n    const index = areaElements.indexOf(view.element)\n\n    return { node, view, index }\n  })\n\n  overlayNodesWithIndex.sort((a, b) => b.index - a.index)\n  const topOverlayParent = overlayNodesWithIndex[0]\n\n  const formerParents = nodes\n    .map(node => node.parent)\n    .filter((id): id is string => Boolean(id))\n    .map(id => {\n      const node = props.editor.getNode(id)\n\n      if (!node) throw new Error('node')\n\n      return node\n    })\n\n  // eslint-disable-next-line no-undefined\n  nodes.forEach(node => node.parent = undefined)\n  if (topOverlayParent) {\n    nodes.forEach(node => node.parent = topOverlayParent.node.id)\n    await resizeParent(topOverlayParent.node, agentParams, props)\n  }\n\n  for (const formerParent of formerParents) {\n    await resizeParent(formerParent, agentParams, props)\n  }\n}\n\nexport async function translateChildren<T>(id: NodeId, { position, previous }: { position: Position, previous: Position }, props: Props<T>) {\n  const children = props.editor.getNodes().filter(n => n.parent === id)\n\n  await Promise.all(children.map(async n => {\n    const dx = position.x - previous.x\n    const dy = position.y - previous.y\n\n    const view = props.area.nodeViews.get(n.id)\n    const node = props.editor.getNode(n.id)\n\n    if (view && node && !node.selected) {\n      const nodePosition = view.position\n\n      await view.translate(nodePosition.x + dx, nodePosition.y + dy)\n    }\n  }))\n}\n", "import { BaseSchemes, NodeEditor, NodeId } from 'rete'\nimport { BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ExpectedScheme } from './types'\n\ntype Props<T> = { editor: NodeEditor<ExpectedScheme>, area: BaseAreaPlugin<ExpectedScheme, T> }\n\nexport function belongsTo<T>(nodeId: NodeId, ids: NodeId[], props: Props<T>) {\n  const node = props.editor.getNode(nodeId)\n\n  if (!node) throw new Error('node')\n\n  if (ids.includes(nodeId)) return true\n  if (!node.parent) return false\n  if (belongsTo(node.parent, ids, props)) return true\n}\n\nexport function hasSelectedParent<T>(nodeId: NodeId, props: Props<T>): boolean {\n  const node = props.editor.getNode(nodeId)\n\n  if (!node) throw new Error('node')\n\n  if (!node.parent) return false\n\n  const parent = props.editor.getNode(node.parent)\n\n  if (!parent) throw new Error('node')\n\n  if (parent.selected) return true\n\n  return hasSelectedParent(node.parent, props)\n}\n\nexport type Translate = (nodeId: string, x: number, y: number) => Promise<void>\n\n/**\n * keep track of currently moving nodes (to prevent infinite loop)\n */\nexport function trackedTranslate<T>(props: Props<T>): {\n  translate: Translate,\n  isTranslating: (id: NodeId) => boolean\n} {\n  const active = new Map<NodeId, number>()\n  const increment = (id: NodeId) => active.set(id, (active.get(id) || 0) + 1)\n  const decrement = (id: NodeId) => active.set(id, (active.get(id) || 0) - 1)\n\n  return {\n    async translate(id, x, y) {\n      const view = props.area.nodeViews.get(id)\n\n      if (!view) throw new Error('cannot find parent node view')\n\n      const previous = view.position\n\n      if (previous.x !== x || previous.y !== y) {\n        increment(id)\n        await view.translate(x, y)\n        decrement(id)\n      }\n    },\n    isTranslating(id) {\n      return (active.get(id) || 0) > 0\n    }\n  }\n}\n\nexport function watchClearing(editor: NodeEditor<BaseSchemes>) {\n  let state = false\n\n  editor.addPipe(context => {\n    if (context.type === 'clear') {\n      state = true\n    }\n    if (context.type === 'cleared' || context.type === 'clearcancelled') {\n      state = false\n    }\n    return context\n  })\n\n  return () => state\n}\n", "import { NodeEditor } from 'rete'\nimport { BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ExpectedScheme } from './types'\nimport { watchClearing } from './utils'\n\ntype Props<T> = { editor: NodeEditor<ExpectedScheme>, area: BaseAreaPlugin<ExpectedScheme, T> }\n\nexport function useValidator<T>(props: Props<T>) {\n  const isClearing = watchClearing(props.editor)\n\n  // eslint-disable-next-line max-statements\n  props.area.addPipe(context => {\n    if (!context || !(typeof context === 'object' && 'type' in context)) return context\n    if (context.type === 'nodecreate') {\n      const parentId = context.data.parent\n\n      if (parentId) {\n        const parent = props.editor.getNodes().find(n => n.id === parentId)\n\n        if (!parent) throw new Error('parent node doesnt exist')\n      }\n    }\n    if (context.type === 'noderemove' && !isClearing()) {\n      const { id } = context.data\n\n      const child = props.editor.getNodes().find(n => n.parent === id)\n\n      if (child) throw new Error('cannot remove parent node with a children')\n    }\n    return context\n  })\n}\n", "import { NodeId } from 'rete'\n\nimport { getPickedNodes } from '../..'\nimport { reassignParent } from '../../scope'\nimport { Position } from '../../types'\nimport { AgentContext, AgentParams, ScopeAgent } from '../types'\n\nexport type DefaultScopesAgentParams = AgentParams & {\n  timeout?: number\n}\n\nexport const useScopeAgent: ScopeAgent = (params: DefaultScopesAgentParams, { area, editor, scopes }) => {\n  const timeout = params.timeout || 250\n\n  let picked: { timeout: number } | null = null\n  let candidates: string[] = []\n\n  function cancel() {\n    if (picked) {\n      window.clearTimeout(picked.timeout)\n      picked = null\n    }\n  }\n\n  function pick(id: NodeId) {\n    const timeoutId = window.setTimeout(() => {\n      const selected = editor.getNodes().filter(n => n.selected)\n      const targets = selected.length ? selected.map(n => n.id) : [id]\n\n      candidates.push(...targets)\n      scopes.emit({ type: 'scopepicked', data: { ids: targets } })\n    }, timeout)\n\n    picked = { timeout: timeoutId }\n  }\n  function release() {\n    const list = [...candidates]\n\n    cancel()\n    candidates = []\n\n    scopes.emit({ type: 'scopereleased', data: { ids: list } })\n\n    return list\n  }\n\n  area.addPipe(async context => {\n    if (!('type' in context)) return context\n    if (context.type === 'nodepicked') {\n      pick(context.data.id)\n    }\n    if (context.type === 'nodetranslated') {\n      cancel()\n    }\n    if (context.type === 'nodedragged') {\n      const { pointer } = area.area\n      const ids = release()\n\n      await reassignParent(ids, pointer, params, { area, editor })\n    }\n    return context\n  })\n}\n\nexport function useVisualEffects<T>({ area, editor, scopes }: AgentContext<T>): void {\n  const pickedNodes = getPickedNodes(scopes)\n  let previousHighlighted: string | null = null\n  let clientPointerPostion: Position | null = null\n\n  // eslint-disable-next-line max-statements\n  function updateHighlightedScopes(position: { x: number, y: number }, nodes: NodeId[]) {\n    if (previousHighlighted) {\n      const view = area.nodeViews.get(previousHighlighted)\n\n      if (view && nodes.length) view.element.style.opacity = '0.4'\n      previousHighlighted = null\n    }\n    if (nodes.length) {\n      const { x, y } = position\n      const elements = document.elementsFromPoint(x, y)\n      const nodeViews = editor.getNodes().map(node => {\n        const view = area.nodeViews.get(node.id)\n\n        if (!view) throw new Error('view')\n\n        return {\n          node,\n          view\n        }\n      })\n\n      const intersectedNodes = elements\n        .map(el => nodeViews.find(item => item.view.element === el))\n        .filter((item): item is Exclude<typeof item, undefined> => Boolean(item))\n\n      const nonSelected = intersectedNodes\n        .filter(item => !item.node.selected)\n      const first = nonSelected[0]\n\n      if (first) {\n        first.view.element.style.opacity = '0.8'\n        previousHighlighted = first.node.id\n      }\n    }\n  }\n  // eslint-disable-next-line max-statements\n  scopes.addPipe(context => {\n    if (context.type === 'scopepicked') {\n      const { ids } = context.data\n\n      editor.getNodes().filter(n => !ids.includes(n.id)).forEach(node => {\n        const view = area.nodeViews.get(node.id)\n\n        if (view) view.element.style.opacity = '0.4'\n      })\n      if (clientPointerPostion) updateHighlightedScopes(clientPointerPostion, pickedNodes)\n    }\n    if (context.type === 'scopereleased') {\n      const { ids } = context.data\n\n      editor.getNodes().filter(n => !ids.includes(n.id)).forEach(node => {\n        const view = area.nodeViews.get(node.id)\n\n        if (view) view.element.style.opacity = ''\n      })\n      if (clientPointerPostion) updateHighlightedScopes(clientPointerPostion, pickedNodes)\n    }\n    if (context.type === 'pointermove') {\n      clientPointerPostion = {\n        x: context.data.event.clientX,\n        y: context.data.event.clientY\n      }\n      updateHighlightedScopes(clientPointerPostion, pickedNodes)\n    }\n    return context\n  })\n}\n", "import { classic } from '../../agents'\nimport { Preset } from '../types'\n\n/**\n * Classic preset allowing capturing a node by long-pressing it and dropping it onto another node to make it a nested.\n * @returns Preset\n * @listens nodepicked\n * @listens nodetranslated\n * @listens nodedragged\n * @emits scopepicked\n * @emits scopereleased\n */\nexport function setup(): Preset {\n  return (params, context) => {\n    classic.useScopeAgent(params, context)\n    classic.useVisualEffects(context)\n  }\n}\n", "/**\n * Presets for scopes plugin.\n * @module\n */\n\nexport * as classic from './classic'\n", "import { NodeEditor, NodeId, Root, Scope } from 'rete'\nimport { BaseArea, BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { useOrdering } from './ordering'\nimport { Preset } from './presets/types'\nimport { translateChildren } from './scope'\nimport { resizeParent } from './sizing'\nimport { ExpectedScheme, Padding, Size } from './types'\nimport { belongsTo, hasSelectedParent, trackedTranslate } from './utils'\nimport { useValidator } from './validation'\n\nexport * as Presets from './presets'\n\n/**\n * Props for `ScopesPlugin` class.\n */\nexport type Props = {\n  /** Padding (space) between the scope's border and its children. Default is `() => ({ top: 40, left: 20, right: 20, bottom: 20 })` */\n  padding?: (id: NodeId) => Padding\n  /** Determines whether the nested node should be excluded from affecting the scope's size, etc. Default is `() => false` */\n  exclude?: (id: NodeId) => boolean\n  /** Customizes the size of the node which is recognized as a parent. Default is `(id, size) => size` */\n  size?: (id: NodeId, size: Size) => Size\n}\n\ntype Requires<Schemes extends ExpectedScheme> =\n  | BaseArea<Schemes>\n\n/**\n * Signal types produced by ConnectionPlugin instance\n * @priority 10\n */\nexport type Scopes =\n  | { type: 'scopepicked', data: { ids: NodeId[] } }\n  | { type: 'scopereleased', data: { ids: NodeId[] } }\n\n/**\n * Scope plugin. Responsible for user interaction with scopes (nested nodes, groups)\n * @priority 9\n * @listens nodetranslated\n * @listens noderemoved\n * @emits scopepicked\n * @emits scopereleased\n */\nexport class ScopesPlugin<Schemes extends ExpectedScheme, T = never> extends Scope<Scopes, [Requires<Schemes>, Root<Schemes>]> {\n  padding: (id: NodeId) => Padding\n  exclude: (id: NodeId) => boolean\n  size: (id: NodeId, size: Size) => Size\n  editor!: NodeEditor<Schemes>\n  area!: BaseAreaPlugin<Schemes, T>\n  presets: Preset[] = []\n\n  constructor(props?: Props) {\n    super('scopes')\n    this.padding = props?.padding || (() => ({\n      top: 40,\n      left: 20,\n      right: 20,\n      bottom: 20\n    }))\n    this.exclude = props?.exclude || (() => false)\n    this.size = props?.size || ((id, size) => size)\n  }\n\n  // eslint-disable-next-line max-statements\n  setParent(scope: Scope<BaseArea<Schemes>, [Root<Schemes>]>): void {\n    super.setParent(scope)\n\n    this.area = this.parentScope<BaseAreaPlugin<Schemes, T>>(BaseAreaPlugin)\n    this.editor = this.area.parentScope<NodeEditor<Schemes>>(NodeEditor)\n\n    const props = { editor: this.editor, area: this.area }\n    const { padding, size, exclude } = this\n    const pickedNodes = getPickedNodes(this)\n    const { translate, isTranslating } = trackedTranslate(props)\n    const agentParams = { padding, size, exclude, translate }\n\n    useValidator(props)\n    useOrdering(props)\n\n    this.presets.forEach(preset => {\n      preset(agentParams, { ...props, scopes: this })\n    })\n\n    // eslint-disable-next-line max-statements, complexity\n    this.addPipe(async context => {\n      if (context.type === 'nodetranslated') {\n        const { id } = context.data\n        const current = props.editor.getNode(id)\n\n        if (!current) throw new Error('cannot find node')\n        // prevent translating children if the node translation\n        // is triggered by its resizing (when its children moved)\n        if (!isTranslating(id)) {\n          await translateChildren(id, context.data, props)\n        }\n\n        const parent = current.parent ? props.editor.getNode(current.parent) : null\n\n        if (parent && !agentParams.exclude(id)) {\n          const hasAnySelectedParent = hasSelectedParent(id, props)\n          const isPicked = belongsTo(current.id, pickedNodes, props)\n\n          if (!hasAnySelectedParent && !isPicked) {\n            await resizeParent(parent, agentParams, props)\n          }\n        }\n      }\n      if (context.type === 'noderemoved') {\n        const parentId = context.data.parent\n        const parent = parentId && props.editor.getNode(parentId)\n\n        if (parent) {\n          await resizeParent(parent, agentParams, props)\n        }\n      }\n      return context\n    })\n  }\n\n  /**\n   * Adds a preset to the plugin.\n   * @param preset Preset that is responsible for user interactions with scopes (e.g. assigning nodes to scopes)\n   */\n  public addPreset(preset: Preset) {\n    this.presets.push(preset)\n  }\n\n  public isDependent(id: NodeId) {\n    const props = { editor: this.editor, area: this.area }\n    const node = this.editor.getNode(id)\n\n    return node && (node.selected || hasSelectedParent(id, props))\n  }\n}\n\nexport function getPickedNodes<S extends ExpectedScheme>(scopes: Scope<Scopes, [Requires<S>, Root<S>]>) {\n  const nodes: NodeId[] = []\n\n  scopes.addPipe(async context => {\n    if (!('type' in context)) return context\n    if (context.type === 'scopepicked') {\n      nodes.push(...context.data.ids)\n    }\n    if (context.type === 'scopereleased') {\n      nodes.splice(0, nodes.length, ...nodes.filter(id => !context.data.ids.includes(id)))\n    }\n    return context\n  })\n  return nodes\n}\n"],
  "mappings": "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",
  "names": ["bringConnectionForward", "id", "props", "view", "area", "connectionViews", "get", "content", "reorder", "element", "bringConnectionBack", "holder", "firstChild", "bringForward", "nodeId", "nodeViews", "connections", "editor", "getConnections", "filter", "c", "source", "target", "children", "getNodes", "n", "parent", "forEach", "connection", "child", "useOrdering", "addPipe", "_ref", "_asyncToGenerator", "_regeneratorRuntime", "mark", "_callee", "context", "wrap", "_callee$", "_context", "prev", "next", "abrupt", "type", "data", "getConnection", "Error", "stop", "_x", "apply", "arguments", "getNodesBoundingBox", "nodes", "boxes", "map", "node", "position", "width", "height", "left", "Math", "min", "_toConsumableArray", "b", "x", "right", "max", "top", "y", "bottom", "updateNodeSizes", "size", "_ref2", "resize", "resizeParent", "_x2", "_x3", "_resizeParent", "agentParams", "padding", "_getNodesBoundingBox", "outerWidth", "outerHeight", "outerTop", "outerLeft", "parentsParent", "exclude", "length", "translate", "getNode", "reassignParent", "_x4", "_reassignParent", "ids", "pointer", "overlayNodes", "areaElements", "overlayNodesWithIndex", "topOverlayParent", "formerParents", "_iterator", "_step", "formerParent", "Boolean", "includes", "Array", "from", "childNodes", "_ref3", "index", "indexOf", "sort", "a", "undefined", "_createForOfIteratorHelper", "s", "done", "value", "t0", "e", "f", "finish", "translateChildren", "_x5", "_x6", "_x7", "_translateChildren", "_callee3", "previous", "_callee3$", "_context3", "Promise", "all", "_ref4", "_callee2", "dx", "dy", "nodePosition", "_callee2$", "_context2", "selected", "_x8", "belongsTo", "hasSelectedParent", "trackedTranslate", "active", "Map", "increment", "set", "decrement", "isTranslating", "watchClearing", "state", "useValidator", "isClearing", "_typeof", "parentId", "find", "useScopeAgent", "params", "scopes", "timeout", "picked", "candidates", "cancel", "window", "clearTimeout", "pick", "timeoutId", "setTimeout", "_candidates", "targets", "push", "emit", "release", "list", "useVisualEffects", "pickedNodes", "getPickedNodes", "previousHighlighted", "clientPointerPostion", "updateHighlightedScopes", "style", "opacity", "elements", "document", "elementsFromPoint", "intersectedNodes", "el", "item", "nonSelected", "first", "event", "clientX", "clientY", "setup", "classic", "ScopesPlugin", "_Scope", "_inherits", "_super", "_createSuper", "_this", "_classCallCheck", "call", "_defineProperty", "_assertThisInitialized", "_createClass", "key", "setParent", "scope", "_this2", "_get", "_getPrototypeOf", "prototype", "parentScope", "BaseAreaPlugin", "NodeEditor", "_trackedTranslate", "presets", "preset", "_objectSpread", "_id", "current", "hasAnySelectedParent", "isPicked", "_parent", "addPreset", "isDependent", "Scope", "splice", "concat"]
}
