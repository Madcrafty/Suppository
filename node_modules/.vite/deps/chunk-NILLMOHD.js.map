{
  "version": 3,
  "sources": ["../../rete-render-utils/src/connection.ts", "../../rete-render-utils/src/utils.ts", "../../rete-render-utils/src/sockets-position/storage.ts", "../../rete-render-utils/src/sockets-position/base-socket-position.ts", "../../rete-render-utils/src/sockets-position/dom-socket-position.ts"],
  "sourcesContent": ["import { Position } from './types'\n\n/**\n * Get classic SVG path for a connection between two points.\n * @param points Array of two points\n * @param curvature Curvature of the connection\n */\nexport function classicConnectionPath(points: [Position, Position], curvature: number) {\n  const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = points\n  const vertical = Math.abs(y1 - y2)\n  const hx1 = x1 + Math.max(vertical / 2, Math.abs(x2 - x1)) * curvature\n  const hx2 = x2 - Math.max(vertical / 2, Math.abs(x2 - x1)) * curvature\n\n  return `M ${x1} ${y1} C ${hx1} ${y1} ${hx2} ${y2} ${x2} ${y2}`\n}\n\n/**\n * Get loop SVG path for a connection between two points.\n * @param points Array of two points\n * @param curvature Curvature of the loop\n * @param size Size of the loop\n */\nexport function loopConnectionPath(points: [Position, Position], curvature: number, size: number) {\n  const [{ x: x1, y: y1 }, { x: x2, y: y2 }] = points\n  const k = y2 > y1 ? 1 : -1\n  const scale = size + Math.abs(x1 - x2) / (size / 2)\n  const middleX = (x1 + x2) / 2\n  const middleY = y1 - k * scale\n  const vertical = (y2 - y1) * curvature\n\n  return `\n        M ${x1} ${y1}\n        C ${x1 + scale} ${y1}\n        ${x1 + scale} ${middleY - vertical}\n        ${middleX} ${middleY}\n        C ${x2 - scale} ${middleY + vertical}\n        ${x2 - scale} ${y2}\n        ${x2} ${y2}\n    `\n}\n", "/* eslint-disable max-statements */\n\n/**\n* Calculates the center coordinates of a child element relative to a parent element.\n* @async\n* @param child The child element whose center coordinates need to be calculated.\n* @param parent The parent element relative to which the child element's center is calculated.\n* @returns Position of the child element's center\n* @throws Error if the child element has a null offsetParent.\n*/\nexport async function getElementCenter(child: HTMLElement, parent: HTMLElement) {\n  while (!child.offsetParent) {\n    await new Promise((res) => setTimeout(res, 0))\n  }\n\n  let x = child.offsetLeft\n  let y = child.offsetTop\n  let currentElement = child.offsetParent as HTMLElement | null\n\n  if (!currentElement) throw new Error('child has null offsetParent')\n\n  while (currentElement !== null && currentElement !== parent) {\n    x += currentElement.offsetLeft + currentElement.clientLeft\n    y += currentElement.offsetTop + currentElement.clientTop\n    currentElement = currentElement.offsetParent as HTMLElement | null\n  }\n  const width = child.offsetWidth\n  const height = child.offsetHeight\n\n  return {\n    x: (x + width / 2),\n    y: (y + height / 2)\n  }\n}\nexport class EventEmitter<T> {\n  listeners = new Set<(data: T) => void>()\n\n  emit(data: T) {\n    this.listeners.forEach(listener => listener(data))\n  }\n\n  listen(handler: (data: T) => void) {\n    this.listeners.add(handler)\n\n    return () => {\n      this.listeners.delete(handler)\n    }\n  }\n}\n", "import { Position, Side } from '../types'\n\ntype SocketPayload = {\n  element: HTMLElement\n  side: Side\n  key: string\n  nodeId: string\n  position: Position // relative to node\n}\n\nexport class SocketsPositionsStorage {\n  elements = new Map<HTMLElement, SocketPayload[]>()\n\n  getPosition(data: { nodeId: string, key: string, side: Side }) {\n    const list = Array.from(this.elements.values()).flat()\n    const found = list.filter(item => {\n      return item.side === data.side && item.nodeId === data.nodeId && item.key === data.key\n    })\n\n    // eslint-disable-next-line no-console\n    if (found.length > 1) console.warn([\n      'Found more than one element for socket with same key and side.',\n      'Probably it was not unmounted correctly'\n    ].join(' '), data)\n\n    return found.pop()?.position || null\n  }\n\n  add(data: SocketPayload) {\n    const existing = this.elements.get(data.element)\n\n    this.elements.set(data.element, existing ? [\n      ...existing.filter(n => !(n.nodeId === data.nodeId && n.key === data.key && n.side === data.side)), data\n    ] : [data])\n  }\n\n  remove(element: SocketPayload['element']) {\n    this.elements.delete(element)\n  }\n\n  snapshot() {\n    return Array.from(this.elements.values()).flat()\n  }\n}\n", "import { BaseSchemes, NodeId, Scope } from 'rete'\nimport { BaseAreaPlugin } from 'rete-area-plugin'\n\nimport { ExpectArea2DExtra, Position, Side } from '../types'\nimport { EventEmitter } from '../utils'\nimport { SocketsPositionsStorage } from './storage'\nimport { OnChange, SocketPositionWatcher } from './types'\n\ntype ListenerData = {\n  nodeId: string\n  side?: Side\n  key?: string\n}\n\n/**\n * Abstract class for socket position calculation. It can be extended to implement custom socket position calculation.\n * @abstract\n * @listens render\n * @listens rendered\n * @listens unmount\n * @listens nodetranslated\n * @listens noderesized\n */\nexport abstract class BaseSocketPosition<Schemes extends BaseSchemes, K> implements SocketPositionWatcher<Scope<never, [K]>> {\n  sockets = new SocketsPositionsStorage()\n  emitter = new EventEmitter<ListenerData>()\n  area: BaseAreaPlugin<Schemes, ExpectArea2DExtra<Schemes>> | null = null\n\n  /**\n   * The method needs to be implemented that calculates the position of the socket.\n   * @param nodeId Node ID\n   * @param side Side of the socket, 'input' or 'output'\n   * @param key Socket key\n   * @param element Socket element\n   */\n  abstract calculatePosition(nodeId: string, side: Side, key: string, element: HTMLElement): Promise<Position | null>\n\n  /**\n   * Attach the watcher to the area's child scope.\n   * @param scope Scope of the watcher that should be a child of `BaseAreaPlugin`\n   */\n  attach(scope: Scope<never, [K]>) {\n    if (this.area) return\n    if (!scope.hasParent()) return\n    this.area = scope.parentScope<BaseAreaPlugin<Schemes, ExpectArea2DExtra<Schemes>>>(BaseAreaPlugin)\n\n    // eslint-disable-next-line max-statements, complexity\n    this.area.addPipe(async context => {\n      if (context.type === 'rendered' && context.data.type === 'socket') {\n        const { nodeId, key, side, element } = context.data\n\n        const position = await this.calculatePosition(nodeId, side, key, element)\n\n        if (position) {\n          this.sockets.add({ nodeId, key, side, element, position })\n          this.emitter.emit({ nodeId, key, side })\n        }\n      } else if (context.type === 'unmount') {\n        this.sockets.remove(context.data.element)\n      } else if (context.type === 'nodetranslated') {\n        this.emitter.emit({ nodeId: context.data.id })\n      } else if (context.type === 'noderesized') {\n        const { id: nodeId } = context.data\n\n        await Promise.all(this.sockets.snapshot()\n          .filter(item => item.nodeId === context.data.id && item.side === 'output')\n          .map(async item => {\n            const { side, key, element } = item\n            const position = await this.calculatePosition(nodeId, side, key, element)\n\n            if (position) {\n              item.position = position\n            }\n          }))\n        this.emitter.emit({ nodeId })\n      } else if (context.type === 'render' && context.data.type === 'connection') {\n        const { source, target } = context.data.payload\n        const nodeId = source || target\n\n        this.emitter.emit({ nodeId })\n      }\n      return context\n    })\n  }\n\n  /**\n   * Listen to socket position changes. Usually used by rendering plugins to update the start/end of the connection.\n   * @internal\n   * @param nodeId Node ID\n   * @param side Side of the socket, 'input' or 'output'\n   * @param key Socket key\n   * @param change Callback function that is called when the socket position changes\n   */\n  listen(nodeId: NodeId, side: Side, key: string, change: OnChange) {\n    const unlisten = this.emitter.listen((data: ListenerData) => {\n      if (data.nodeId !== nodeId) return\n      if ((!data.key || data.side === side) && (!data.side || data.key === key)) {\n        const position = this.sockets.getPosition({ side, nodeId, key })\n\n        if (!position) return\n\n        const { x, y } = position\n        const nodeView = this.area?.nodeViews.get(nodeId)\n\n        if (nodeView) change({\n          x: x + nodeView.position.x,\n          y: y + nodeView.position.y\n        })\n      }\n    })\n\n    this.sockets.snapshot().forEach(data => {\n      if (data.nodeId === nodeId) this.emitter.emit(data)\n    })\n    return unlisten\n  }\n}\n", "import { BaseSchemes } from 'rete'\n\nimport { Position, Side } from '../types'\nimport { getElementCenter } from '../utils'\nimport { BaseSocketPosition } from './base-socket-position'\n\n/**\n * Props for `DOMSocketPosition` class.\n */\nexport type Props = {\n  /**\n   * Allows to customize the position of the socket. By default, the position is shifted by 12px on the x-axis relative to the center of the socket.\n   * @param position Center position of the socket\n   * @param nodeId Node ID\n   * @param side Side of the socket, 'input' or 'output'\n   * @param key Socket key\n   * @returns Custom position of the socket\n   */\n  offset?: (position: Position, nodeId: string, side: Side, key: string) => Position\n}\n\n/**\n * Class for socket position calculation based on DOM elements. It uses `getElementCenter` function to calculate the position.\n */\nexport class DOMSocketPosition<Schemes extends BaseSchemes, K> extends BaseSocketPosition<Schemes, K> {\n  constructor(private props?: Props) {\n    super()\n  }\n\n  async calculatePosition(nodeId: string, side: Side, key: string, element: HTMLElement) {\n    const view = this.area?.nodeViews.get(nodeId)\n\n    if (!view?.element) return null\n    const position = await getElementCenter(element, view.element)\n\n    if (this.props?.offset) return this.props?.offset(position, nodeId, side, key)\n\n    return {\n      x: position.x + 12 * (side === 'input' ? -1 : 1),\n      y: position.y\n    }\n  }\n}\n\n/**\n * Wrapper function for `DOMSocketPosition` class.\n * @param props Props for `DOMSocketPosition` class\n */\nexport function getDOMSocketPosition<Schemes extends BaseSchemes, K>(props?: Props) {\n  return new DOMSocketPosition<Schemes, K>(props)\n}\n"],
  "mappings": "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",
  "names": ["classicConnectionPath", "points", "curvature", "_points", "_slicedToArray", "_points$", "x1", "x", "y1", "y", "_points$2", "x2", "y2", "vertical", "Math", "abs", "hx1", "max", "hx2", "concat", "loopConnectionPath", "size", "_points2", "_points2$", "_points2$2", "k", "scale", "middleX", "middleY", "getElementCenter", "_x", "_x2", "_getElementCenter", "apply", "arguments", "_asyncToGenerator", "_regeneratorRuntime", "mark", "_callee", "child", "parent", "currentElement", "width", "height", "wrap", "_callee$", "_context", "prev", "next", "offsetParent", "Promise", "res", "setTimeout", "offsetLeft", "offsetTop", "Error", "clientLeft", "clientTop", "offsetWidth", "offsetHeight", "abrupt", "stop", "EventEmitter", "_classCallCheck", "_defineProperty", "Set", "_createClass", "key", "value", "emit", "data", "listeners", "forEach", "listener", "listen", "handler", "_this", "add", "SocketsPositionsStorage", "Map", "getPosition", "_found$pop", "list", "Array", "from", "elements", "values", "flat", "found", "filter", "item", "side", "nodeId", "length", "console", "warn", "join", "pop", "position", "existing", "get", "element", "set", "_toConsumableArray", "n", "remove", "snapshot", "BaseSocketPosition", "attach", "scope", "area", "hasParent", "parentScope", "BaseAreaPlugin", "addPipe", "_ref", "_callee2", "context", "_context$data", "_nodeId", "_key", "_side", "_element", "_nodeId2", "_context$data$payload", "source", "target", "_nodeId3", "_callee2$", "_context2", "type", "calculatePosition", "sent", "sockets", "emitter", "id", "all", "map", "_ref2", "payload", "change", "_this2", "unlisten", "_this2$area", "nodeView", "nodeViews", "DOMSocketPosition", "_BaseSocketPosition", "_inherits", "_super", "_createSuper", "props", "call", "_calculatePosition", "_this$area", "_this$props", "_this$props2", "view", "offset", "_x3", "_x4", "getDOMSocketPosition"]
}
